// Generated by gencpp from file RobotCar/voice2robotRequest.msg
// DO NOT EDIT!


#ifndef ROBOTCAR_MESSAGE_VOICE2ROBOTREQUEST_H
#define ROBOTCAR_MESSAGE_VOICE2ROBOTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RobotCar
{
template <class ContainerAllocator>
struct voice2robotRequest_
{
  typedef voice2robotRequest_<ContainerAllocator> Type;

  voice2robotRequest_()
    : room_point(0)  {
    }
  voice2robotRequest_(const ContainerAllocator& _alloc)
    : room_point(0)  {
  (void)_alloc;
    }



   typedef int32_t _room_point_type;
  _room_point_type room_point;





  typedef boost::shared_ptr< ::RobotCar::voice2robotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RobotCar::voice2robotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct voice2robotRequest_

typedef ::RobotCar::voice2robotRequest_<std::allocator<void> > voice2robotRequest;

typedef boost::shared_ptr< ::RobotCar::voice2robotRequest > voice2robotRequestPtr;
typedef boost::shared_ptr< ::RobotCar::voice2robotRequest const> voice2robotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RobotCar::voice2robotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RobotCar::voice2robotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RobotCar::voice2robotRequest_<ContainerAllocator1> & lhs, const ::RobotCar::voice2robotRequest_<ContainerAllocator2> & rhs)
{
  return lhs.room_point == rhs.room_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RobotCar::voice2robotRequest_<ContainerAllocator1> & lhs, const ::RobotCar::voice2robotRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RobotCar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RobotCar::voice2robotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RobotCar::voice2robotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCar::voice2robotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bda4dac81e87b974068cf32c26e9399";
  }

  static const char* value(const ::RobotCar::voice2robotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bda4dac81e87b97ULL;
  static const uint64_t static_value2 = 0x4068cf32c26e9399ULL;
};

template<class ContainerAllocator>
struct DataType< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotCar/voice2robotRequest";
  }

  static const char* value(const ::RobotCar::voice2robotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 room_point\n"
"\n"
;
  }

  static const char* value(const ::RobotCar::voice2robotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.room_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct voice2robotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RobotCar::voice2robotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RobotCar::voice2robotRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "room_point: ";
    Printer<int32_t>::stream(s, indent + "  ", v.room_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTCAR_MESSAGE_VOICE2ROBOTREQUEST_H

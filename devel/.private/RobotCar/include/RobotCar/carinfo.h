// Generated by gencpp from file RobotCar/carinfo.msg
// DO NOT EDIT!


#ifndef ROBOTCAR_MESSAGE_CARINFO_H
#define ROBOTCAR_MESSAGE_CARINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RobotCar
{
template <class ContainerAllocator>
struct carinfo_
{
  typedef carinfo_<ContainerAllocator> Type;

  carinfo_()
    : speed_x(0)
    , speed_z(0)
    , power(0)  {
    }
  carinfo_(const ContainerAllocator& _alloc)
    : speed_x(0)
    , speed_z(0)
    , power(0)  {
  (void)_alloc;
    }



   typedef int32_t _speed_x_type;
  _speed_x_type speed_x;

   typedef int32_t _speed_z_type;
  _speed_z_type speed_z;

   typedef int32_t _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::RobotCar::carinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RobotCar::carinfo_<ContainerAllocator> const> ConstPtr;

}; // struct carinfo_

typedef ::RobotCar::carinfo_<std::allocator<void> > carinfo;

typedef boost::shared_ptr< ::RobotCar::carinfo > carinfoPtr;
typedef boost::shared_ptr< ::RobotCar::carinfo const> carinfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RobotCar::carinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RobotCar::carinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RobotCar::carinfo_<ContainerAllocator1> & lhs, const ::RobotCar::carinfo_<ContainerAllocator2> & rhs)
{
  return lhs.speed_x == rhs.speed_x &&
    lhs.speed_z == rhs.speed_z &&
    lhs.power == rhs.power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RobotCar::carinfo_<ContainerAllocator1> & lhs, const ::RobotCar::carinfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RobotCar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RobotCar::carinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RobotCar::carinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RobotCar::carinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RobotCar::carinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCar::carinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCar::carinfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RobotCar::carinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45c0e504be1d5153074c3d5b10d3b65d";
  }

  static const char* value(const ::RobotCar::carinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45c0e504be1d5153ULL;
  static const uint64_t static_value2 = 0x074c3d5b10d3b65dULL;
};

template<class ContainerAllocator>
struct DataType< ::RobotCar::carinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotCar/carinfo";
  }

  static const char* value(const ::RobotCar::carinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RobotCar::carinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 speed_x\n"
"int32 speed_z\n"
"int32 power\n"
"\n"
;
  }

  static const char* value(const ::RobotCar::carinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RobotCar::carinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_x);
      stream.next(m.speed_z);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct carinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RobotCar::carinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RobotCar::carinfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "speed_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed_z);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "power: ";
    Printer<int32_t>::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTCAR_MESSAGE_CARINFO_H
